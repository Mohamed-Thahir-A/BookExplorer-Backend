import { Repository } from 'typeorm';
import { Navigation } from '../entities/navigation.entity';
import { Category } from '../entities/category.entity';
import { Product } from '../entities/product.entity';
import { ProductDetail } from '../entities/product-detail.entity';
import { ScrapeJob } from '../entities/scrape-job.entity';
export declare class ScrapingService {
    private navigationRepository;
    private categoryRepository;
    private productRepository;
    private productDetailRepository;
    private scrapeJobRepository;
    private readonly logger;
    private isScraping;
    private scrapingPromise;
    private readonly CACHE_TIMEOUTS;
    private readonly WORLD_OF_BOOKS_CONFIG;
    constructor(navigationRepository: Repository<Navigation>, categoryRepository: Repository<Category>, productRepository: Repository<Product>, productDetailRepository: Repository<ProductDetail>, scrapeJobRepository: Repository<ScrapeJob>);
    private launchBrowser;
    private setupPage;
    private delay;
    private extractCurrency;
    private cleanAuthorName;
    private extractISBN;
    private extractCategoryFromContext;
    private scrapeProductPageDetails;
    private isCacheFresh;
    private getCachedNavigation;
    private getCachedProducts;
    scrapeBooks(forceRefresh?: boolean): Promise<Product[]>;
    private getUrlSlugForCategory;
    scrapeCategoryWithPagination(categorySlug: string, page?: number): Promise<Product[]>;
    scrapeCategoryBooks(categorySlug: string): Promise<Product[]>;
    private saveProductsWithEnhancedData;
    private generateSourceIdFromUrl;
    private generateRealisticRating;
    private generateRealisticReviewCount;
    private saveProductDetails;
    private updateCategoryProductCounts;
    scrapeProductDetails(productId: string): Promise<ProductDetail>;
    scrapeNavigation(forceRefresh?: boolean): Promise<Navigation[]>;
    private createScrapeJob;
    private updateScrapeJob;
    getScrapingStatus(): Promise<{
        isScraping: boolean;
        recentJobs: ScrapeJob[];
    }>;
    stopScraping(): Promise<void>;
}
